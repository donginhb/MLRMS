/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class HeatMeterPara : TBase
{
  private int _slaveID;
  private string _coldParam;
  private string _hotParam;
  private OperateError _error;

  public int SlaveID
  {
    get
    {
      return _slaveID;
    }
    set
    {
      __isset.slaveID = true;
      this._slaveID = value;
    }
  }

  public string ColdParam
  {
    get
    {
      return _coldParam;
    }
    set
    {
      __isset.coldParam = true;
      this._coldParam = value;
    }
  }

  public string HotParam
  {
    get
    {
      return _hotParam;
    }
    set
    {
      __isset.hotParam = true;
      this._hotParam = value;
    }
  }

  public OperateError Error
  {
    get
    {
      return _error;
    }
    set
    {
      __isset.error = true;
      this._error = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool slaveID;
    public bool coldParam;
    public bool hotParam;
    public bool error;
  }

  public HeatMeterPara() {
  }

  public void Read (TProtocol iprot)
  {
    TField field;
    iprot.ReadStructBegin();
    while (true)
    {
      field = iprot.ReadFieldBegin();
      if (field.Type == TType.Stop) { 
        break;
      }
      switch (field.ID)
      {
        case 1:
          if (field.Type == TType.I32) {
            SlaveID = iprot.ReadI32();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 2:
          if (field.Type == TType.String) {
            ColdParam = iprot.ReadString();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 3:
          if (field.Type == TType.String) {
            HotParam = iprot.ReadString();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 4:
          if (field.Type == TType.Struct) {
            Error = new OperateError();
            Error.Read(iprot);
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        default: 
          TProtocolUtil.Skip(iprot, field.Type);
          break;
      }
      iprot.ReadFieldEnd();
    }
    iprot.ReadStructEnd();
  }

  public void Write(TProtocol oprot) {
    TStruct struc = new TStruct("HeatMeterPara");
    oprot.WriteStructBegin(struc);
    TField field = new TField();
    if (__isset.slaveID) {
      field.Name = "slaveID";
      field.Type = TType.I32;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(SlaveID);
      oprot.WriteFieldEnd();
    }
    if (ColdParam != null && __isset.coldParam) {
      field.Name = "coldParam";
      field.Type = TType.String;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(ColdParam);
      oprot.WriteFieldEnd();
    }
    if (HotParam != null && __isset.hotParam) {
      field.Name = "hotParam";
      field.Type = TType.String;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(HotParam);
      oprot.WriteFieldEnd();
    }
    if (Error != null && __isset.error) {
      field.Name = "error";
      field.Type = TType.Struct;
      field.ID = 4;
      oprot.WriteFieldBegin(field);
      Error.Write(oprot);
      oprot.WriteFieldEnd();
    }
    oprot.WriteFieldStop();
    oprot.WriteStructEnd();
  }

  public override string ToString() {
    StringBuilder sb = new StringBuilder("HeatMeterPara(");
    sb.Append("SlaveID: ");
    sb.Append(SlaveID);
    sb.Append(",ColdParam: ");
    sb.Append(ColdParam);
    sb.Append(",HotParam: ");
    sb.Append(HotParam);
    sb.Append(",Error: ");
    sb.Append(Error== null ? "<null>" : Error.ToString());
    sb.Append(")");
    return sb.ToString();
  }

}

