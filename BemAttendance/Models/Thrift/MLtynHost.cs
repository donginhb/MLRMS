/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class MLtynHost {
  public interface Iface {
    OperateError OperateDevice(int slaveID, bool operate);
    #if SILVERLIGHT
    IAsyncResult Begin_OperateDevice(AsyncCallback callback, object state, int slaveID, bool operate);
    OperateError End_OperateDevice(IAsyncResult asyncResult);
    #endif
    OperateError SetMode(int slaveID, int mode);
    #if SILVERLIGHT
    IAsyncResult Begin_SetMode(AsyncCallback callback, object state, int slaveID, int mode);
    OperateError End_SetMode(IAsyncResult asyncResult);
    #endif
    OperateError SetTemp(int slaveID, double temp);
    #if SILVERLIGHT
    IAsyncResult Begin_SetTemp(AsyncCallback callback, object state, int slaveID, double temp);
    OperateError End_SetTemp(IAsyncResult asyncResult);
    #endif
    List<HostPara> GetHostPara();
    #if SILVERLIGHT
    IAsyncResult Begin_GetHostPara(AsyncCallback callback, object state);
    List<HostPara> End_GetHostPara(IAsyncResult asyncResult);
    #endif
    List<WaterMeterPara> GetWaterMeterPara();
    #if SILVERLIGHT
    IAsyncResult Begin_GetWaterMeterPara(AsyncCallback callback, object state);
    List<WaterMeterPara> End_GetWaterMeterPara(IAsyncResult asyncResult);
    #endif
    List<AmmeterPara> GetAmmeterPara();
    #if SILVERLIGHT
    IAsyncResult Begin_GetAmmeterPara(AsyncCallback callback, object state);
    List<AmmeterPara> End_GetAmmeterPara(IAsyncResult asyncResult);
    #endif
    List<HeatMeterPara> GetHeatMeterPara();
    #if SILVERLIGHT
    IAsyncResult Begin_GetHeatMeterPara(AsyncCallback callback, object state);
    List<HeatMeterPara> End_GetHeatMeterPara(IAsyncResult asyncResult);
    #endif
    OperateError DeviceRefresh(int slaveID, bool operate);
    #if SILVERLIGHT
    IAsyncResult Begin_DeviceRefresh(AsyncCallback callback, object state, int slaveID, bool operate);
    OperateError End_DeviceRefresh(IAsyncResult asyncResult);
    #endif
  }

  public class Client : IDisposable, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;
    protected int seqid_;

    public TProtocol InputProtocol
    {
      get { return iprot_; }
    }
    public TProtocol OutputProtocol
    {
      get { return oprot_; }
    }


    #region " IDisposable Support "
    private bool _IsDisposed;

    // IDisposable
    public void Dispose()
    {
      Dispose(true);
    }
    

    protected virtual void Dispose(bool disposing)
    {
      if (!_IsDisposed)
      {
        if (disposing)
        {
          if (iprot_ != null)
          {
            ((IDisposable)iprot_).Dispose();
          }
          if (oprot_ != null)
          {
            ((IDisposable)oprot_).Dispose();
          }
        }
      }
      _IsDisposed = true;
    }
    #endregion


    
    #if SILVERLIGHT
    public IAsyncResult Begin_OperateDevice(AsyncCallback callback, object state, int slaveID, bool operate)
    {
      return send_OperateDevice(callback, state, slaveID, operate);
    }

    public OperateError End_OperateDevice(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_OperateDevice();
    }

    #endif

    public OperateError OperateDevice(int slaveID, bool operate)
    {
      #if !SILVERLIGHT
      send_OperateDevice(slaveID, operate);
      return recv_OperateDevice();

      #else
      var asyncResult = Begin_OperateDevice(null, null, slaveID, operate);
      return End_OperateDevice(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_OperateDevice(AsyncCallback callback, object state, int slaveID, bool operate)
    #else
    public void send_OperateDevice(int slaveID, bool operate)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("OperateDevice", TMessageType.Call, seqid_));
      OperateDevice_args args = new OperateDevice_args();
      args.SlaveID = slaveID;
      args.Operate = operate;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public OperateError recv_OperateDevice()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      OperateDevice_result result = new OperateDevice_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "OperateDevice failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_SetMode(AsyncCallback callback, object state, int slaveID, int mode)
    {
      return send_SetMode(callback, state, slaveID, mode);
    }

    public OperateError End_SetMode(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_SetMode();
    }

    #endif

    public OperateError SetMode(int slaveID, int mode)
    {
      #if !SILVERLIGHT
      send_SetMode(slaveID, mode);
      return recv_SetMode();

      #else
      var asyncResult = Begin_SetMode(null, null, slaveID, mode);
      return End_SetMode(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_SetMode(AsyncCallback callback, object state, int slaveID, int mode)
    #else
    public void send_SetMode(int slaveID, int mode)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("SetMode", TMessageType.Call, seqid_));
      SetMode_args args = new SetMode_args();
      args.SlaveID = slaveID;
      args.Mode = mode;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public OperateError recv_SetMode()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      SetMode_result result = new SetMode_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SetMode failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_SetTemp(AsyncCallback callback, object state, int slaveID, double temp)
    {
      return send_SetTemp(callback, state, slaveID, temp);
    }

    public OperateError End_SetTemp(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_SetTemp();
    }

    #endif

    public OperateError SetTemp(int slaveID, double temp)
    {
      #if !SILVERLIGHT
      send_SetTemp(slaveID, temp);
      return recv_SetTemp();

      #else
      var asyncResult = Begin_SetTemp(null, null, slaveID, temp);
      return End_SetTemp(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_SetTemp(AsyncCallback callback, object state, int slaveID, double temp)
    #else
    public void send_SetTemp(int slaveID, double temp)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("SetTemp", TMessageType.Call, seqid_));
      SetTemp_args args = new SetTemp_args();
      args.SlaveID = slaveID;
      args.Temp = temp;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public OperateError recv_SetTemp()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      SetTemp_result result = new SetTemp_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SetTemp failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_GetHostPara(AsyncCallback callback, object state)
    {
      return send_GetHostPara(callback, state);
    }

    public List<HostPara> End_GetHostPara(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_GetHostPara();
    }

    #endif

    public List<HostPara> GetHostPara()
    {
      #if !SILVERLIGHT
      send_GetHostPara();
      return recv_GetHostPara();

      #else
      var asyncResult = Begin_GetHostPara(null, null);
      return End_GetHostPara(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_GetHostPara(AsyncCallback callback, object state)
    #else
    public void send_GetHostPara()
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("GetHostPara", TMessageType.Call, seqid_));
      GetHostPara_args args = new GetHostPara_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<HostPara> recv_GetHostPara()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      GetHostPara_result result = new GetHostPara_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetHostPara failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_GetWaterMeterPara(AsyncCallback callback, object state)
    {
      return send_GetWaterMeterPara(callback, state);
    }

    public List<WaterMeterPara> End_GetWaterMeterPara(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_GetWaterMeterPara();
    }

    #endif

    public List<WaterMeterPara> GetWaterMeterPara()
    {
      #if !SILVERLIGHT
      send_GetWaterMeterPara();
      return recv_GetWaterMeterPara();

      #else
      var asyncResult = Begin_GetWaterMeterPara(null, null);
      return End_GetWaterMeterPara(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_GetWaterMeterPara(AsyncCallback callback, object state)
    #else
    public void send_GetWaterMeterPara()
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("GetWaterMeterPara", TMessageType.Call, seqid_));
      GetWaterMeterPara_args args = new GetWaterMeterPara_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<WaterMeterPara> recv_GetWaterMeterPara()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      GetWaterMeterPara_result result = new GetWaterMeterPara_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetWaterMeterPara failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_GetAmmeterPara(AsyncCallback callback, object state)
    {
      return send_GetAmmeterPara(callback, state);
    }

    public List<AmmeterPara> End_GetAmmeterPara(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_GetAmmeterPara();
    }

    #endif

    public List<AmmeterPara> GetAmmeterPara()
    {
      #if !SILVERLIGHT
      send_GetAmmeterPara();
      return recv_GetAmmeterPara();

      #else
      var asyncResult = Begin_GetAmmeterPara(null, null);
      return End_GetAmmeterPara(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_GetAmmeterPara(AsyncCallback callback, object state)
    #else
    public void send_GetAmmeterPara()
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("GetAmmeterPara", TMessageType.Call, seqid_));
      GetAmmeterPara_args args = new GetAmmeterPara_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<AmmeterPara> recv_GetAmmeterPara()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      GetAmmeterPara_result result = new GetAmmeterPara_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetAmmeterPara failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_GetHeatMeterPara(AsyncCallback callback, object state)
    {
      return send_GetHeatMeterPara(callback, state);
    }

    public List<HeatMeterPara> End_GetHeatMeterPara(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_GetHeatMeterPara();
    }

    #endif

    public List<HeatMeterPara> GetHeatMeterPara()
    {
      #if !SILVERLIGHT
      send_GetHeatMeterPara();
      return recv_GetHeatMeterPara();

      #else
      var asyncResult = Begin_GetHeatMeterPara(null, null);
      return End_GetHeatMeterPara(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_GetHeatMeterPara(AsyncCallback callback, object state)
    #else
    public void send_GetHeatMeterPara()
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("GetHeatMeterPara", TMessageType.Call, seqid_));
      GetHeatMeterPara_args args = new GetHeatMeterPara_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<HeatMeterPara> recv_GetHeatMeterPara()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      GetHeatMeterPara_result result = new GetHeatMeterPara_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetHeatMeterPara failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_DeviceRefresh(AsyncCallback callback, object state, int slaveID, bool operate)
    {
      return send_DeviceRefresh(callback, state, slaveID, operate);
    }

    public OperateError End_DeviceRefresh(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_DeviceRefresh();
    }

    #endif

    public OperateError DeviceRefresh(int slaveID, bool operate)
    {
      #if !SILVERLIGHT
      send_DeviceRefresh(slaveID, operate);
      return recv_DeviceRefresh();

      #else
      var asyncResult = Begin_DeviceRefresh(null, null, slaveID, operate);
      return End_DeviceRefresh(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_DeviceRefresh(AsyncCallback callback, object state, int slaveID, bool operate)
    #else
    public void send_DeviceRefresh(int slaveID, bool operate)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("DeviceRefresh", TMessageType.Call, seqid_));
      DeviceRefresh_args args = new DeviceRefresh_args();
      args.SlaveID = slaveID;
      args.Operate = operate;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public OperateError recv_DeviceRefresh()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      DeviceRefresh_result result = new DeviceRefresh_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DeviceRefresh failed: unknown result");
    }

  }
  public class Processor : TProcessor {
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_["OperateDevice"] = OperateDevice_Process;
      processMap_["SetMode"] = SetMode_Process;
      processMap_["SetTemp"] = SetTemp_Process;
      processMap_["GetHostPara"] = GetHostPara_Process;
      processMap_["GetWaterMeterPara"] = GetWaterMeterPara_Process;
      processMap_["GetAmmeterPara"] = GetAmmeterPara_Process;
      processMap_["GetHeatMeterPara"] = GetHeatMeterPara_Process;
      processMap_["DeviceRefresh"] = DeviceRefresh_Process;
    }

    protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
    private Iface iface_;
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void OperateDevice_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      OperateDevice_args args = new OperateDevice_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      OperateDevice_result result = new OperateDevice_result();
      result.Success = iface_.OperateDevice(args.SlaveID, args.Operate);
      oprot.WriteMessageBegin(new TMessage("OperateDevice", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void SetMode_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      SetMode_args args = new SetMode_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      SetMode_result result = new SetMode_result();
      result.Success = iface_.SetMode(args.SlaveID, args.Mode);
      oprot.WriteMessageBegin(new TMessage("SetMode", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void SetTemp_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      SetTemp_args args = new SetTemp_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      SetTemp_result result = new SetTemp_result();
      result.Success = iface_.SetTemp(args.SlaveID, args.Temp);
      oprot.WriteMessageBegin(new TMessage("SetTemp", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void GetHostPara_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      GetHostPara_args args = new GetHostPara_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      GetHostPara_result result = new GetHostPara_result();
      result.Success = iface_.GetHostPara();
      oprot.WriteMessageBegin(new TMessage("GetHostPara", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void GetWaterMeterPara_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      GetWaterMeterPara_args args = new GetWaterMeterPara_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      GetWaterMeterPara_result result = new GetWaterMeterPara_result();
      result.Success = iface_.GetWaterMeterPara();
      oprot.WriteMessageBegin(new TMessage("GetWaterMeterPara", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void GetAmmeterPara_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      GetAmmeterPara_args args = new GetAmmeterPara_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      GetAmmeterPara_result result = new GetAmmeterPara_result();
      result.Success = iface_.GetAmmeterPara();
      oprot.WriteMessageBegin(new TMessage("GetAmmeterPara", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void GetHeatMeterPara_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      GetHeatMeterPara_args args = new GetHeatMeterPara_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      GetHeatMeterPara_result result = new GetHeatMeterPara_result();
      result.Success = iface_.GetHeatMeterPara();
      oprot.WriteMessageBegin(new TMessage("GetHeatMeterPara", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void DeviceRefresh_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      DeviceRefresh_args args = new DeviceRefresh_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      DeviceRefresh_result result = new DeviceRefresh_result();
      result.Success = iface_.DeviceRefresh(args.SlaveID, args.Operate);
      oprot.WriteMessageBegin(new TMessage("DeviceRefresh", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class OperateDevice_args : TBase
  {
    private int _slaveID;
    private bool _operate;

    public int SlaveID
    {
      get
      {
        return _slaveID;
      }
      set
      {
        __isset.slaveID = true;
        this._slaveID = value;
      }
    }

    public bool Operate
    {
      get
      {
        return _operate;
      }
      set
      {
        __isset.operate = true;
        this._operate = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool slaveID;
      public bool operate;
    }

    public OperateDevice_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              SlaveID = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Bool) {
              Operate = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("OperateDevice_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.slaveID) {
        field.Name = "slaveID";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SlaveID);
        oprot.WriteFieldEnd();
      }
      if (__isset.operate) {
        field.Name = "operate";
        field.Type = TType.Bool;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Operate);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("OperateDevice_args(");
      sb.Append("SlaveID: ");
      sb.Append(SlaveID);
      sb.Append(",Operate: ");
      sb.Append(Operate);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class OperateDevice_result : TBase
  {
    private OperateError _success;

    public OperateError Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public OperateDevice_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.Struct) {
              Success = new OperateError();
              Success.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("OperateDevice_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.Struct;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          Success.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("OperateDevice_result(");
      sb.Append("Success: ");
      sb.Append(Success== null ? "<null>" : Success.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SetMode_args : TBase
  {
    private int _slaveID;
    private int _mode;

    public int SlaveID
    {
      get
      {
        return _slaveID;
      }
      set
      {
        __isset.slaveID = true;
        this._slaveID = value;
      }
    }

    public int Mode
    {
      get
      {
        return _mode;
      }
      set
      {
        __isset.mode = true;
        this._mode = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool slaveID;
      public bool mode;
    }

    public SetMode_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              SlaveID = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Mode = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("SetMode_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.slaveID) {
        field.Name = "slaveID";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SlaveID);
        oprot.WriteFieldEnd();
      }
      if (__isset.mode) {
        field.Name = "mode";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Mode);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("SetMode_args(");
      sb.Append("SlaveID: ");
      sb.Append(SlaveID);
      sb.Append(",Mode: ");
      sb.Append(Mode);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SetMode_result : TBase
  {
    private OperateError _success;

    public OperateError Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public SetMode_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.Struct) {
              Success = new OperateError();
              Success.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("SetMode_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.Struct;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          Success.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("SetMode_result(");
      sb.Append("Success: ");
      sb.Append(Success== null ? "<null>" : Success.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SetTemp_args : TBase
  {
    private int _slaveID;
    private double _temp;

    public int SlaveID
    {
      get
      {
        return _slaveID;
      }
      set
      {
        __isset.slaveID = true;
        this._slaveID = value;
      }
    }

    public double Temp
    {
      get
      {
        return _temp;
      }
      set
      {
        __isset.temp = true;
        this._temp = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool slaveID;
      public bool temp;
    }

    public SetTemp_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              SlaveID = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Double) {
              Temp = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("SetTemp_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.slaveID) {
        field.Name = "slaveID";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SlaveID);
        oprot.WriteFieldEnd();
      }
      if (__isset.temp) {
        field.Name = "temp";
        field.Type = TType.Double;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Temp);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("SetTemp_args(");
      sb.Append("SlaveID: ");
      sb.Append(SlaveID);
      sb.Append(",Temp: ");
      sb.Append(Temp);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SetTemp_result : TBase
  {
    private OperateError _success;

    public OperateError Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public SetTemp_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.Struct) {
              Success = new OperateError();
              Success.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("SetTemp_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.Struct;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          Success.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("SetTemp_result(");
      sb.Append("Success: ");
      sb.Append(Success== null ? "<null>" : Success.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class GetHostPara_args : TBase
  {

    public GetHostPara_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("GetHostPara_args");
      oprot.WriteStructBegin(struc);
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("GetHostPara_args(");
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class GetHostPara_result : TBase
  {
    private List<HostPara> _success;

    public List<HostPara> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public GetHostPara_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.List) {
              {
                Success = new List<HostPara>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  HostPara _elem2 = new HostPara();
                  _elem2 = new HostPara();
                  _elem2.Read(iprot);
                  Success.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("GetHostPara_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
            foreach (HostPara _iter3 in Success)
            {
              _iter3.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("GetHostPara_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class GetWaterMeterPara_args : TBase
  {

    public GetWaterMeterPara_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("GetWaterMeterPara_args");
      oprot.WriteStructBegin(struc);
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("GetWaterMeterPara_args(");
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class GetWaterMeterPara_result : TBase
  {
    private List<WaterMeterPara> _success;

    public List<WaterMeterPara> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public GetWaterMeterPara_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.List) {
              {
                Success = new List<WaterMeterPara>();
                TList _list4 = iprot.ReadListBegin();
                for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                {
                  WaterMeterPara _elem6 = new WaterMeterPara();
                  _elem6 = new WaterMeterPara();
                  _elem6.Read(iprot);
                  Success.Add(_elem6);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("GetWaterMeterPara_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
            foreach (WaterMeterPara _iter7 in Success)
            {
              _iter7.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("GetWaterMeterPara_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class GetAmmeterPara_args : TBase
  {

    public GetAmmeterPara_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("GetAmmeterPara_args");
      oprot.WriteStructBegin(struc);
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("GetAmmeterPara_args(");
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class GetAmmeterPara_result : TBase
  {
    private List<AmmeterPara> _success;

    public List<AmmeterPara> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public GetAmmeterPara_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.List) {
              {
                Success = new List<AmmeterPara>();
                TList _list8 = iprot.ReadListBegin();
                for( int _i9 = 0; _i9 < _list8.Count; ++_i9)
                {
                  AmmeterPara _elem10 = new AmmeterPara();
                  _elem10 = new AmmeterPara();
                  _elem10.Read(iprot);
                  Success.Add(_elem10);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("GetAmmeterPara_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
            foreach (AmmeterPara _iter11 in Success)
            {
              _iter11.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("GetAmmeterPara_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class GetHeatMeterPara_args : TBase
  {

    public GetHeatMeterPara_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("GetHeatMeterPara_args");
      oprot.WriteStructBegin(struc);
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("GetHeatMeterPara_args(");
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class GetHeatMeterPara_result : TBase
  {
    private List<HeatMeterPara> _success;

    public List<HeatMeterPara> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public GetHeatMeterPara_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.List) {
              {
                Success = new List<HeatMeterPara>();
                TList _list12 = iprot.ReadListBegin();
                for( int _i13 = 0; _i13 < _list12.Count; ++_i13)
                {
                  HeatMeterPara _elem14 = new HeatMeterPara();
                  _elem14 = new HeatMeterPara();
                  _elem14.Read(iprot);
                  Success.Add(_elem14);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("GetHeatMeterPara_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
            foreach (HeatMeterPara _iter15 in Success)
            {
              _iter15.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("GetHeatMeterPara_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class DeviceRefresh_args : TBase
  {
    private int _slaveID;
    private bool _operate;

    public int SlaveID
    {
      get
      {
        return _slaveID;
      }
      set
      {
        __isset.slaveID = true;
        this._slaveID = value;
      }
    }

    public bool Operate
    {
      get
      {
        return _operate;
      }
      set
      {
        __isset.operate = true;
        this._operate = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool slaveID;
      public bool operate;
    }

    public DeviceRefresh_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              SlaveID = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Bool) {
              Operate = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("DeviceRefresh_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.slaveID) {
        field.Name = "slaveID";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SlaveID);
        oprot.WriteFieldEnd();
      }
      if (__isset.operate) {
        field.Name = "operate";
        field.Type = TType.Bool;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Operate);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("DeviceRefresh_args(");
      sb.Append("SlaveID: ");
      sb.Append(SlaveID);
      sb.Append(",Operate: ");
      sb.Append(Operate);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class DeviceRefresh_result : TBase
  {
    private OperateError _success;

    public OperateError Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public DeviceRefresh_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.Struct) {
              Success = new OperateError();
              Success.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("DeviceRefresh_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.Struct;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          Success.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("DeviceRefresh_result(");
      sb.Append("Success: ");
      sb.Append(Success== null ? "<null>" : Success.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }

}
